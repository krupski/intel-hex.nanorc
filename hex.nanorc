##############################################################################
#
#  Intel HEX file format syntax coloring config file for the nano editor.
#
#  Copyright (c) 2016 Shaun Lawrie <beatbophiphop@gmail.com>
#  Copyright (c) 2016 Roger A. Krupski <rakrupski@verizon.net>
#
#  Last update: 03 May 2016.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
#
#  A HUGE thanks to Ubuntu forums member "BasiliusCarver" (Shaun Lawrie)
#  for all his help in figuring this REGEX stuff out.
#  Please see: http://ubuntuforums.org/showthread.php?t=2322948
#
##############################################################################
#
#  Info on Intel HEX format:
#  http://www.interlog.com/~speff/usefulinfo/Hexfrmt.pdf
#
##############################################################################

# begin hex.nanorc

syntax "hex" "\.hex$"

##
## Note RAK: changed "color" to "icolor" where necessary in case
## the hex file has lowercase a-f hex characters for example:
## ":10018000ff91ef91bf91af919f918f917f916f916f"
##

##
## NOTE: GitHub sometimes mangles the control characters. IF the
## carriage return (^M) characters are misssing, use the following
## to recreate them:
## To generate the carriage return character that looks like "^M"
## (but is only ONE character), in the nano editor, try this:
## SHIFT-ALT-V (nano's "verbatim" mode), then press CTRL-m.
## This should allow you to generate the carriage return character.
##

##
## The order of the following rules is important because they are cascading.
## Where the regex is yuck I have put the target colored group in parentheses ().
##

## Data. This is the majority of the input so apply to the whole line.
color yellow "^.+$"

## Checksum. The last byte of each line.
## Note RAK: changed end of line to ("CR[0|1]$") to preserve
## proper coloring in case the file is a Windows CR/LF style.
## Don't edit what appears to be "^M" since it's only one character!
icolor brightmagenta "[A-F0-9]{2}(^M?$)"

## Record type. The fourth byte. Legal types are 00 thru 05 only.
## First color them all the "error" color...
icolor black,white "^:[A-F0-9]{6}([A-F0-9]{2})"

## ...Now color good record types the "legal" color.
icolor brightblue "^:[A-F0-9]{6}([0][0-5])"

## Address. The second and third byte.
icolor brightred "^:[A-F0-9]{2}([A-F0-9]{4})"

## Data length. The first byte.
icolor cyan "^:([A-F0-9]{2})"

## Start marker.
color brightwhite "^:"

## Apply the EOF syntax last.
## Note RAK: commented out because the FF is merely a checksum so it
## should be colored as a checksum. Uncomment if you like.
## color white,black "FF$"

## If there is an ending CR, don't color it as part of the checksum
## Don't edit this as what appears to be "^M" is only one character!
color brightblack "^M$"

# end hex.nanorc
